import React, { useState, useEffect } from 'react'
import { useNavigate, useSearchParams } from 'react-router-dom'
import { useLanguage } from '../../contexts/LanguageContext'
import { database } from '../../lib/supabase'
import AdminNavigation from './AdminNavigation'
import { 
  Loader2, Eye, CheckCircle, XCircle, Clock, Search, Filter,
  Users, FileText, AlertCircle, Download, ExternalLink,
  Calendar, Mail, Instagram, Youtube, Video, RefreshCw,
  Link as LinkIcon, FolderOpen, Presentation, Wand2, X, Save,
  ArrowLeft, DollarSign, FileText as FileTextIcon, Edit
} from 'lucide-react'

const ApplicationsReportSimple = () => {
  const navigate = useNavigate()
  const { language } = useLanguage()
  const [searchParams] = useSearchParams()
  const campaignIdFromUrl = searchParams.get('campaign')

  const [applications, setApplications] = useState([])
  const [campaigns, setCampaigns] = useState([])
  const [loading, setLoading] = useState(true)
  const [processing, setProcessing] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState('')

  const [selectedCampaign, setSelectedCampaign] = useState(campaignIdFromUrl || '')
  const [statusFilter, setStatusFilter] = useState('')
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedApplication, setSelectedApplication] = useState(null)
  const [detailModal, setDetailModal] = useState(false)
  const [driveModal, setDriveModal] = useState(false)
  const [driveForm, setDriveForm] = useState({
    google_drive_url: '',
    google_slides_url: '',
    notes: ''
  })

  // 다국어 텍스트
  const texts = {
    ko: {
      title: '신청서 관리',
      subtitle: '모든 캠페인 신청서를 관리합니다',
      totalApplications: '총 신청서',
      pendingApplications: '대기 중',
      virtuallySelected: '가상 선택',
      approvedApplications: '승인됨',
      rejectedApplications: '거절됨',
      filterByCampaign: '캠페인별 필터',
      filterByStatus: '상태별 필터',
      searchPlaceholder: '이름, 캠페인명으로 검색...',
      allCampaigns: '모든 캠페인',
      allStatuses: '모든 상태',
      pending: '대기 중',
      virtualSelected: '가상 선택',
      approved: '승인됨',
      rejected: '거절됨',
      viewDetails: '상세 보기',
      approve: '승인',
      reject: '거절',
      virtualSelect: '가상 선택',
      cancelVirtualSelect: '가상 선택 취소',
      provideDriveAccess: '드라이브 제공',
      applicationDetails: '신청서 상세 정보',
      campaignInfo: '캠페인 정보',
      applicantInfo: '신청자 정보',
      questionsAndAnswers: '질문 및 답변',
      name: '이름',
      email: '이메일',
      age: '나이',
      skinType: '피부 타입',
      bio: '자기소개',
      socialMedia: '소셜 미디어',
      appliedAt: '신청일',
      updatedAt: '수정일',
      virtualSelectedAt: '가상 선택일',
      approvedAt: '승인일',
      rejectedAt: '거절일',
      status: '상태',
      actions: '작업',
      close: '닫기',
      confirm: '확인',
      cancel: '취소',
      loading: '로딩 중...',
      error: '오류가 발생했습니다.',
      success: '성공적으로 처리되었습니다.',
      noApplications: '신청서가 없습니다.',
      confirmApprove: '이 신청서를 승인하시겠습니까?',
      confirmReject: '이 신청서를 거절하시겠습니까?',
      confirmVirtualSelect: '이 신청자를 가상 선택하시겠습니까?',
      confirmCancelVirtualSelect: '가상 선택을 취소하시겠습니까?',
      driveAccessTitle: '구글 드라이브 및 슬라이드 제공',
      driveAccessDescription: '승인된 참가자에게 구글 드라이브(영상 업로드용)와 구글 슬라이드(가이드)를 제공합니다.',
      googleDriveUrl: '구글 드라이브 URL (영상 업로드용)',
      googleSlidesUrl: '구글 슬라이드 URL (가이드)',
      notes: '추가 메모',
      save: '저장',
      exportExcel: 'Excel 내보내기',
      autoGenerate: '자동 생성',
      autoGenerateDescription: '브랜드명과 사용자 이름을 기반으로 URL을 자동 생성합니다.'
    },
    ja: {
      title: '申請書管理',
      subtitle: 'すべてのキャンペーン申請書を管理します',
      totalApplications: '総申請書',
      pendingApplications: '待機中',
      virtuallySelected: '仮選択',
      approvedApplications: '承認済み',
      rejectedApplications: '拒否済み',
      filterByCampaign: 'キャンペーン別フィルター',
      filterByStatus: 'ステータス別フィルター',
      searchPlaceholder: '名前、メール、キャンペーン名で検索...',
      allCampaigns: 'すべてのキャンペーン',
      allStatuses: 'すべてのステータス',
      pending: '待機中',
      virtualSelected: '仮選択',
      approved: '承認済み',
      rejected: '拒否済み',
      viewDetails: '詳細を見る',
      approve: '承認',
      reject: '拒否',
      virtualSelect: '仮選択',
      cancelVirtualSelect: '仮選択取消',
      provideDriveAccess: 'ドライブ提供',
      applicationDetails: '申請書詳細情報',
      campaignInfo: 'キャンペーン情報',
      applicantInfo: '申請者情報',
      questionsAndAnswers: '質問と回答',
      name: '名前',
      email: 'メール',
      age: '年齢',
      skinType: '肌タイプ',
      bio: '自己紹介',
      socialMedia: 'ソーシャルメディア',
      appliedAt: '申請日',
      updatedAt: '更新日',
      virtualSelectedAt: '仮選択日',
      approvedAt: '承認日',
      rejectedAt: '拒否日',
      status: 'ステータス',
      actions: 'アクション',
      close: '閉じる',
      confirm: '確認',
      cancel: 'キャンセル',
      loading: '読み込み中...',
      error: 'エラーが発生しました。',
      success: '正常に処理されました。',
      noApplications: '申請書がありません。',
      confirmApprove: 'この申請書を承認しますか？',
      confirmReject: 'この申請書を拒否しますか？',
      confirmVirtualSelect: 'この申請者を仮選択しますか？',
      confirmCancelVirtualSelect: '仮選択を取り消しますか？',
      driveAccessTitle: 'Googleドライブ及びスライド提供',
      driveAccessDescription: '承認された参加者にGoogleドライブ（動画アップロード用）とGoogleスライド（ガイド）を提供します。',
      googleDriveUrl: 'Googleドライブ URL（動画アップロード用）',
      googleSlidesUrl: 'Googleスライド URL（ガイド）',
      notes: '追加メモ',
      save: '保存',
      exportExcel: 'Excel エクスポート',
      autoGenerate: '自動生成',
      autoGenerateDescription: 'ブランド名とユーザー名に基づいてURLを自動生成します。'
    }
  }

  const t = texts[language] || texts.ko

  useEffect(() => {
    console.log('ApplicationsReportSimple 마운트됨')
    loadData()
  }, [])

  const loadData = async () => {
    try {
      setLoading(true)
      setError('')
      
      console.log('신청서 데이터 로드 시작')
      
      // 단계별 데이터 로딩으로 흰화면 문제 해결
      
      // 1단계: 캠페인 데이터 로드
      console.log('1단계: 캠페인 데이터 로드...')
      try {
        const campaignsData = await database.campaigns.getAll()
        setCampaigns(campaignsData || [])
        console.log('캠페인 데이터 로드 성공:', campaignsData?.length || 0)
      } catch (error) {
        console.warn('캠페인 데이터 로드 실패:', error)
        setCampaigns([])
      }
      
      // 2단계: 신청서 데이터 로드
      console.log('2단계: 신청서 데이터 로드...')
      try {
        const applicationsData = await database.applications.getAll()
        setApplications(applicationsData || [])
        console.log('신청서 데이터 로드 성공:', applicationsData?.length || 0)
      } catch (error) {
        console.warn('신청서 데이터 로드 실패:', error)
        setApplications([])
      }
      
    } catch (error) {
      console.error('데이터 로드 오류:', error)
      setError(`${t.error}: ${error.message}`)
    } finally {
      setLoading(false)
      console.log('데이터 로드 완료')
    }
  }

  const updateApplicationStatus = async (applicationId, newStatus) => {
    try {
      setProcessing(true)
      setError('')
      setSuccess('')
      
      console.log('신청서 상태 업데이트:', applicationId, newStatus)

      const updateData = {
        status: newStatus,
        updated_at: new Date().toISOString()
      }

      // 상태별 타임스탬프 추가
      if (newStatus === 'virtual_selected') {
        updateData.virtual_selected_at = new Date().toISOString()
      } else if (newStatus === 'approved') {
        updateData.approved_at = new Date().toISOString()
      } else if (newStatus === 'rejected') {
        updateData.rejected_at = new Date().toISOString()
      }

      await database.applications.update(applicationId, updateData)
      
      console.log('상태 업데이트 완료')
      setSuccess(t.success)
      
      // 데이터 다시 로드
      setTimeout(() => {
        loadData()
      }, 1000)
      
    } catch (error) {
      console.error('상태 업데이트 오류:', error)
      setError(`상태 업데이트에 실패했습니다: ${error.message}`)
    } finally {
      setProcessing(false)
    }
  }

  const handleStatusChange = async (application, newStatus) => {
    let confirmMessage = ''
    
    switch (newStatus) {
      case 'approved':
        confirmMessage = t.confirmApprove
        break
      case 'rejected':
        confirmMessage = t.confirmReject
        break
      case 'virtual_selected':
        confirmMessage = t.confirmVirtualSelect
        break
      case 'pending':
        confirmMessage = t.confirmCancelVirtualSelect
        break
      default:
        return
    }

    if (confirm(confirmMessage)) {
      await updateApplicationStatus(application.id, newStatus)
    }
  }

  const openDriveModal = (application) => {
    setSelectedApplication(application)
    
    // 현재 캠페인 찾기
    const campaign = campaigns.find(c => c.id === application.campaign_id)
    
    setDriveForm({
      google_drive_url: application.google_drive_url || '',
      google_slides_url: application.google_slides_url || '',
      notes: application.additional_info || '', // drive_notes 대신 additional_info 필드 사용
      campaign: campaign
    })
    setDriveModal(true)
  }

  // 자동 URL 생성 함수
  const generateDriveUrls = () => {
    if (!selectedApplication || !driveForm.campaign) return;
    
    const brandName = driveForm.campaign.brand || 'brand';
    const userName = selectedApplication.user_name || 'user';
    
    try {
      
      setDriveForm(prev => ({
        ...prev,
        google_drive_url: driveUrl,
        google_slides_url: slidesUrl
      }));
      
      setSuccess('URL이 자동 생성되었습니다.');
    } catch (error) {
      setError('URL 자동 생성에 실패했습니다: ' + error.message);
    }
  };

  const handleSaveDriveAccess = async () => {
    try {
      setProcessing(true)
      setError('')
      setSuccess('')
      
      console.log('드라이브 접근 정보 저장:', selectedApplication.id, driveForm)

      const updateData = {
        google_drive_url: driveForm.google_drive_url.trim() || null,
        google_slides_url: driveForm.google_slides_url.trim() || null,
        additional_info: driveForm.notes.trim() || null, // drive_notes 대신 additional_info 필드 사용
        updated_at: new Date().toISOString()
      }

      await database.applications.update(selectedApplication.id, updateData)
      
      console.log('드라이브 정보 저장 완료')
      setSuccess('구글 드라이브 및 슬라이드 정보가 저장되었습니다.')
      setDriveModal(false)
      
      // 데이터 다시 로드
      setTimeout(() => {
        loadData()
      }, 1000)
      
    } catch (error) {
      console.error('드라이브 정보 저장 오류:', error)
      setError(`드라이브 정보 저장에 실패했습니다: ${error.message}`)
    } finally {
      setProcessing(false)
    }
  }

  const openDetailModal = (application) => {
    setSelectedApplication(application)
    setDetailModal(true)
  }

  const getStatusBadge = (status) => {
    const statusMap = {
      pending: { color: 'bg-yellow-100 text-yellow-800', text: t.pending, icon: Clock },
      virtual_selected: { color: 'bg-purple-100 text-purple-800', text: t.virtualSelected, icon: Eye },
      approved: { color: 'bg-green-100 text-green-800', text: t.approved, icon: CheckCircle },
      rejected: { color: 'bg-red-100 text-red-800', text: t.rejected, icon: XCircle }
    }
    
    const statusInfo = statusMap[status] || statusMap.pending
    const IconComponent = statusInfo.icon
    
    return (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusInfo.color}`}>
        <IconComponent className="h-3 w-3 mr-1" />
        {statusInfo.text}
      </span>
    )
  }

  const formatDate = (dateString) => {
    if (!dateString) return '-'
    return new Date(dateString).toLocaleDateString(language === 'ko' ? 'ko-KR' : 'ja-JP')
  }

  const formatCurrency = (amount) => {
    if (!amount) return '-'
    return new Intl.NumberFormat(language === 'ko' ? 'ko-KR' : 'ja-JP', {
      style: 'currency',
      currency: language === 'ko' ? 'KRW' : 'JPY'
    }).format(amount)
  }

  // 필터링된 신청서
  const filteredApplications = applications.filter(app => {
    const matchesCampaign = !selectedCampaign || app.campaign_id === selectedCampaign
    const matchesStatus = statusFilter === '' || app.status === statusFilter
    const matchesSearch = searchTerm === '' || 
      app.user_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      app.campaign_title?.toLowerCase().includes(searchTerm.toLowerCase())
    
    return matchesCampaign && matchesStatus && matchesSearch
  })
  // 통계 계산
  const stats = {
    total: filteredApplications.length,
    pending: filteredApplications.filter(app => app.status === 'pending').length,
    virtualSelected: filteredApplications.filter(app => app.status === 'virtual_selected').length,
    approved: filteredApplications.filter(app => app.status === 'approved').length,
    rejected: filteredApplications.filter(app => app.status === 'rejected').length
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <AdminNavigation />
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="flex items-center justify-center h-64">
            <div className="flex items-center space-x-2">
              <Loader2 className="h-6 w-6 animate-spin" />
              <span>{t.loading}</span>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <AdminNavigation />
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">{t.title}</h1>
              <p className="text-gray-600 mt-2">{t.subtitle}</p>
            </div>
            <div className="flex space-x-2">
              <button
                onClick={loadData}
                disabled={loading}
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              >
                <RefreshCw className="h-4 w-4 mr-2" />
                새로고침
              </button>
              <button
                onClick={() => {/* Excel 내보내기 기능 */}}
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              >
                <Download className="h-4 w-4 mr-2" />
                {t.exportExcel}
              </button>
            </div>
          </div>
        </div>

        {/* Success/Error Messages */}
        {error && (
          <div className="mb-6 bg-red-50 border border-red-200 rounded-md p-4">
            <div className="flex">
              <AlertCircle className="h-5 w-5 text-red-400" />
              <div className="ml-3">
                <p className="text-sm text-red-800">{error}</p>
              </div>
            </div>
          </div>
        )}

        {success && (
          <div className="mb-6 bg-green-50 border border-green-200 rounded-md p-4">
            <div className="flex">
              <CheckCircle className="h-5 w-5 text-green-400" />
              <div className="ml-3">
                <p className="text-sm text-green-800">{success}</p>
              </div>
            </div>
          </div>
        )}

        {/* 통계 카드 */}
        <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-8">
          <div className="bg-white overflow-hidden shadow rounded-lg">
            <div className="p-5">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <FileTextIcon className="h-6 w-6 text-gray-400" />
                </div>
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 truncate">{t.totalApplications}</dt>
                    <dd className="text-lg font-medium text-gray-900">{stats.total}</dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white overflow-hidden shadow rounded-lg">
            <div className="p-5">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <Clock className="h-6 w-6 text-yellow-400" />
                </div>
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 truncate">{t.pendingApplications}</dt>
                    <dd className="text-lg font-medium text-gray-900">{stats.pending}</dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white overflow-hidden shadow rounded-lg">
            <div className="p-5">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <Eye className="h-6 w-6 text-purple-400" />
                </div>
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 truncate">{t.virtuallySelected}</dt>
                    <dd className="text-lg font-medium text-gray-900">{stats.virtualSelected}</dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white overflow-hidden shadow rounded-lg">
            <div className="p-5">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <CheckCircle className="h-6 w-6 text-green-400" />
                </div>
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 truncate">{t.approvedApplications}</dt>
                    <dd className="text-lg font-medium text-gray-900">{stats.approved}</dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white overflow-hidden shadow rounded-lg">
            <div className="p-5">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <XCircle className="h-6 w-6 text-red-400" />
                </div>
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 truncate">{t.rejectedApplications}</dt>
                    <dd className="text-lg font-medium text-gray-900">{stats.rejected}</dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* 필터 및 검색 */}
        <div className="bg-white shadow px-4 py-5 sm:rounded-lg sm:p-6 mb-8">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <label htmlFor="campaign" className="block text-sm font-medium text-gray-700">
                {t.filterByCampaign}
              </label>
              <select
                id="campaign"
                value={selectedCampaign}
                onChange={(e) => setSelectedCampaign(e.target.value)}
                className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
              >
                <option value="">{t.allCampaigns}</option>
                {campaigns.map((campaign) => (
                  <option key={campaign.id} value={campaign.id}>
                    {campaign.title || campaign.brand || '제목 없음'}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label htmlFor="status" className="block text-sm font-medium text-gray-700">
                {t.filterByStatus}
              </label>
              <select
                id="status"
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
              >
                <option value="">{t.allStatuses}</option>
                <option value="pending">{t.pending}</option>
                <option value="virtual_selected">{t.virtualSelected}</option>
                <option value="approved">{t.approved}</option>
                <option value="rejected">{t.rejected}</option>
              </select>
            </div>

            <div>
              <label htmlFor="search" className="block text-sm font-medium text-gray-700">
                검색
              </label>
              <div className="mt-1 relative rounded-md shadow-sm">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Search className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  type="text"
                  id="search"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md"
                  placeholder={t.searchPlaceholder}
                />
              </div>
            </div>
          </div>
        </div>

        {/* 신청서 목록 */}
        <div className="bg-white shadow overflow-hidden sm:rounded-md">
          <ul className="divide-y divide-gray-200">
            {filteredApplications.map((application) => {
              const campaign = campaigns.find(c => c.id === application.campaign_id) || {}
              
              return (
                <li key={application.id}>
                  <div className="px-4 py-4 sm:px-6">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <div className="flex-shrink-0">
                          <div className="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                            <span className="text-gray-500 font-medium">{application.user_name?.charAt(0) || '?'}</span>
                          </div>
                        </div>
                        <div className="ml-4">
                          <div className="flex items-center">
                            <p className="text-sm font-medium text-indigo-600 truncate">
                              {application.user_name || '이름 없음'}
                            </p>
                            <div className="ml-2">
                              {getStatusBadge(application.status)}
                            </div>
                          </div>
                          <div className="mt-1">
                            <p className="text-sm text-gray-500">
                              {application.user_email || '이메일 없음'}
                            </p>
                          </div>
                          <div className="mt-1">
                            <p className="text-sm text-gray-500">
                              캠페인: {campaign.title || campaign.brand || '알 수 없음'}
                            </p>
                          </div>
                        </div>
                      </div>
                      <div className="flex space-x-2">
                        <button
                          onClick={() => openDetailModal(application)}
                          className="inline-flex items-center px-3 py-1 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                        >
                          <Eye className="h-4 w-4 mr-1" />
                          {t.viewDetails}
                        </button>
                        
                        {application.status === 'pending' && (
                          <button
                            onClick={() => handleStatusChange(application, 'virtual_selected')}
                            disabled={processing}
                            className="inline-flex items-center px-3 py-1 border border-purple-300 shadow-sm text-sm leading-4 font-medium rounded-md text-purple-700 bg-purple-50 hover:bg-purple-100"
                          >
                            <Eye className="h-4 w-4 mr-1" />
                            {t.virtualSelect}
                          </button>
                        )}
                        
                        {application.status === 'virtual_selected' && (
                          <>
                            <button
                              onClick={() => handleStatusChange(application, 'pending')}
                              disabled={processing}
                              className="inline-flex items-center px-3 py-1 border border-yellow-300 shadow-sm text-sm leading-4 font-medium rounded-md text-yellow-700 bg-yellow-50 hover:bg-yellow-100"
                            >
                              <Clock className="h-4 w-4 mr-1" />
                              {t.cancelVirtualSelect}
                            </button>
                            <button
                              onClick={() => handleStatusChange(application, 'approved')}
                              disabled={processing}
                              className="inline-flex items-center px-3 py-1 border border-green-300 shadow-sm text-sm leading-4 font-medium rounded-md text-green-700 bg-green-50 hover:bg-green-100"
                            >
                              <CheckCircle className="h-4 w-4 mr-1" />
                              {t.approve}
                            </button>
                          </>
                        )}
                        
                        {application.status === 'approved' && (
                          <>
                            <button
                              onClick={() => handleStatusChange(application, 'pending')}
                              disabled={processing}
                              className="inline-flex items-center px-3 py-1 border border-yellow-300 shadow-sm text-sm leading-4 font-medium rounded-md text-yellow-700 bg-yellow-50 hover:bg-yellow-100"
                            >
                              <Clock className="h-4 w-4 mr-1" />
                              취소
                            </button>
                            <button
                              onClick={() => openDriveModal(application)}
                              disabled={processing}
                              className="inline-flex items-center px-3 py-1 border border-blue-300 shadow-sm text-sm leading-4 font-medium rounded-md text-blue-700 bg-blue-50 hover:bg-blue-100"
                            >
                              <FolderOpen className="h-4 w-4 mr-1" />
                              {t.provideDriveAccess}
                            </button>
                          </>
                        )}
                        
                        {(application.status === 'pending' || application.status === 'virtual_selected') && (
                          <button
                            onClick={() => handleStatusChange(application, 'rejected')}
                            disabled={processing}
                            className="inline-flex items-center px-3 py-1 border border-red-300 shadow-sm text-sm leading-4 font-medium rounded-md text-red-700 bg-red-50 hover:bg-red-100"
                          >
                            <XCircle className="h-4 w-4 mr-1" />
                            {t.reject}
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                </li>
              )
            })}
            
            {filteredApplications.length === 0 && (
              <li>
                <div className="px-4 py-8 text-center">
                  <p className="text-gray-500">{t.noApplications}</p>
                </div>
              </li>
            )}
          </ul>
        </div>

        {/* 상세 정보 모달 */}
        {detailModal && selectedApplication && (
          <div className="fixed inset-0 z-50 overflow-y-auto">
            <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
              <div className="fixed inset-0 transition-opacity" aria-hidden="true">
                <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
              </div>

              <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

              <div className="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full sm:p-6">
                <div className="sm:flex sm:items-start">
                  <div className="w-full">
                    <div className="flex justify-between items-center mb-4">
                      <h3 className="text-lg leading-6 font-medium text-gray-900">
                        {t.applicationDetails}
                      </h3>
                      <button
                        onClick={() => setDetailModal(false)}
                        className="text-gray-400 hover:text-gray-600"
                      >
                        <X className="h-6 w-6" />
                      </button>
                    </div>
                    
                    <div className="space-y-6">
                      {/* 캠페인 정보 */}
                      <div>
                        <h4 className="text-md font-semibold mb-3">{t.campaignInfo}</h4>
                        <div className="bg-gray-50 p-4 rounded-lg">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                            <div>
                              <p className="text-gray-600">캠페인:</p>
                              <p className="font-medium">{selectedApplication.campaign_title || '알 수 없음'}</p>
                            </div>
                            <div>
                              <p className="text-gray-600">브랜드:</p>
                              <p className="font-medium">{selectedApplication.campaign_brand || '알 수 없음'}</p>
                            </div>
                          </div>
                        </div>
                      </div>

                      {/* 신청자 정보 */}
                      <div>
                        <h4 className="text-md font-semibold mb-3">{t.applicantInfo}</h4>
                        <div className="bg-gray-50 p-4 rounded-lg">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                            <div>
                              <p className="text-gray-600">{t.name}:</p>
                              <p className="font-medium">{selectedApplication.user_name || '-'}</p>
                            </div>
                            <div>
                              <p className="text-gray-600">{t.email}:</p>
                              <p className="font-medium">{selectedApplication.user_email || '-'}</p>
                            </div>
                            <div>
                              <p className="text-gray-600">{t.age}:</p>
                              <p className="font-medium">{selectedApplication.user_age || '-'}</p>
                            </div>
                            <div>
                              <p className="text-gray-600">{t.skinType}:</p>
                              <p className="font-medium">{selectedApplication.user_skin_type || '-'}</p>
                            </div>
                          </div>
                          
                          <div className="mt-4">
                            <p className="text-gray-600 mb-1">{t.bio}:</p>
                            <p className="text-gray-800">{selectedApplication.user_bio || '-'}</p>
                          </div>
                          
                          <div className="mt-4">
                            <p className="text-gray-600 mb-2">{t.socialMedia}:</p>
                            <div className="space-y-2">
                              {selectedApplication.user_instagram_url && (
                                <div className="flex items-center">
                                  <Instagram className="h-4 w-4 text-pink-500 mr-2" />
                                  <a 
                                    href={selectedApplication.user_instagram_url} 
                                    target="_blank" 
                                    rel="noopener noreferrer"
                                    className="text-blue-600 hover:underline flex items-center"
                                  >
                                    {selectedApplication.user_instagram_url}
                                    <ExternalLink className="h-3 w-3 ml-1" />
                                  </a>
                                </div>
                              )}
                              
                              {selectedApplication.user_tiktok_url && (
                                <div className="flex items-center">
                                  <Video className="h-4 w-4 text-black mr-2" />
                                  <a 
                                    href={selectedApplication.user_tiktok_url} 
                                    target="_blank" 
                                    rel="noopener noreferrer"
                                    className="text-blue-600 hover:underline flex items-center"
                                  >
                                    {selectedApplication.user_tiktok_url}
                                    <ExternalLink className="h-3 w-3 ml-1" />
                                  </a>
                                </div>
                              )}
                              
                              {selectedApplication.user_youtube_url && (
                                <div className="flex items-center">
                                  <Youtube className="h-4 w-4 text-red-500 mr-2" />
                                  <a 
                                    href={selectedApplication.user_youtube_url} 
                                    target="_blank" 
                                    rel="noopener noreferrer"
                                    className="text-blue-600 hover:underline flex items-center"
                                  >
                                    {selectedApplication.user_youtube_url}
                                    <ExternalLink className="h-3 w-3 ml-1" />
                                  </a>
                                </div>
                              )}
                              
                              {!selectedApplication.user_instagram_url && !selectedApplication.user_tiktok_url && !selectedApplication.user_youtube_url && (
                                <p className="text-gray-500">-</p>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>

                      {/* 상태 및 날짜 정보 */}
                      <div>
                        <h4 className="text-md font-semibold mb-3">상태 및 날짜 정보</h4>
                        <div className="bg-gray-50 p-4 rounded-lg">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                            <div>
                              <p className="text-gray-600">{t.status}:</p>
                              <div className="mt-1">
                                {getStatusBadge(selectedApplication.status)}
                              </div>
                            </div>
                            <div>
                              <p className="text-gray-600">{t.appliedAt}:</p>
                              <p className="font-medium">{formatDate(selectedApplication.created_at)}</p>
                            </div>
                            {selectedApplication.virtual_selected_at && (
                              <div>
                                <p className="text-gray-600">{t.virtualSelectedAt}:</p>
                                <p className="font-medium">{formatDate(selectedApplication.virtual_selected_at)}</p>
                              </div>
                            )}
                            {selectedApplication.approved_at && (
                              <div>
                                <p className="text-gray-600">{t.approvedAt}:</p>
                                <p className="font-medium">{formatDate(selectedApplication.approved_at)}</p>
                              </div>
                            )}
                            {selectedApplication.rejected_at && (
                              <div>
                                <p className="text-gray-600">{t.rejectedAt}:</p>
                                <p className="font-medium">{formatDate(selectedApplication.rejected_at)}</p>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>

                      {/* 구글 드라이브 정보 */}
                      {selectedApplication.status === 'approved' && (
                        <div>
                          <h4 className="text-md font-semibold mb-3">구글 드라이브 정보</h4>
                          <div className="bg-gray-50 p-4 rounded-lg">
                            <div className="space-y-3">
                              <div>
                                <p className="text-gray-600 mb-1">구글 드라이브 URL:</p>
                                {selectedApplication.google_drive_url ? (
                                  <a 
                                    href={selectedApplication.google_drive_url} 
                                    target="_blank" 
                                    rel="noopener noreferrer"
                                    className="text-blue-600 hover:underline flex items-center"
                                  >
                                    <FolderOpen className="h-4 w-4 mr-1" />
                                    {selectedApplication.google_drive_url}
                                    <ExternalLink className="h-3 w-3 ml-1" />
                                  </a>
                                ) : (
                                  <p className="text-gray-500">미설정</p>
                                )}
                              </div>
                              
                              <div>
                                <p className="text-gray-600 mb-1">구글 슬라이드 URL:</p>
                                {selectedApplication.google_slides_url ? (
                                  <a 
                                    href={selectedApplication.google_slides_url} 
                                    target="_blank" 
                                    rel="noopener noreferrer"
                                    className="text-blue-600 hover:underline flex items-center"
                                  >
                                    <Presentation className="h-4 w-4 mr-1" />
                                    {selectedApplication.google_slides_url}
                                    <ExternalLink className="h-3 w-3 ml-1" />
                                  </a>
                                ) : (
                                  <p className="text-gray-500">미설정</p>
                                )}
                              </div>
                              
                              <div>
                                <p className="text-gray-600 mb-1">추가 메모:</p>
                                <p className="text-gray-800">{selectedApplication.additional_info || '-'}</p>
                              </div>
                            </div>
                            
                            <div className="mt-4">
                              <button
                                onClick={() => {
                                  setDetailModal(false)
                                  setTimeout(() => openDriveModal(selectedApplication), 100)
                                }}
                                className="inline-flex items-center px-3 py-2 border border-blue-300 shadow-sm text-sm leading-4 font-medium rounded-md text-blue-700 bg-blue-50 hover:bg-blue-100"
                              >
                                <Edit className="h-4 w-4 mr-1" />
                                드라이브 정보 수정
                              </button>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                    
                    <div className="mt-6 flex justify-end">
                      <button
                        onClick={() => setDetailModal(false)}
                        className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                      >
                        {t.close}
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* 드라이브 모달 */}
        {driveModal && selectedApplication && (
          <div className="fixed inset-0 z-50 overflow-y-auto">
            <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
              <div className="fixed inset-0 transition-opacity" aria-hidden="true">
                <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
              </div>

              <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

              <div className="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
                <div>
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg leading-6 font-medium text-gray-900">
                      {t.driveAccessTitle}
                    </h3>
                    <button
                      onClick={() => setDriveModal(false)}
                      className="text-gray-400 hover:text-gray-600"
                    >
                      <X className="h-6 w-6" />
                    </button>
                  </div>
                  
                  <p className="text-sm text-gray-500 mb-4">
                    {t.driveAccessDescription}
                  </p>
                  
                  <div className="mb-4">
                    <button
                      onClick={generateDriveUrls}
                      className="inline-flex items-center px-3 py-2 border border-purple-300 shadow-sm text-sm leading-4 font-medium rounded-md text-purple-700 bg-purple-50 hover:bg-purple-100"
                    >
                      <Wand2 className="h-4 w-4 mr-1" />
                      {t.autoGenerate}
                    </button>
                    <p className="text-xs text-gray-500 mt-1">
                      {t.autoGenerateDescription}
                    </p>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <label htmlFor="google_drive_url" className="block text-sm font-medium text-gray-700">
                        {t.googleDriveUrl}
                      </label>
                      <input
                        type="text"
                        id="google_drive_url"
                        value={driveForm.google_drive_url}
                        onChange={(e) => setDriveForm(prev => ({ ...prev, google_drive_url: e.target.value }))}
                        className="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
                      />
                    </div>
                    
                    <div>
                      <label htmlFor="google_slides_url" className="block text-sm font-medium text-gray-700">
                        {t.googleSlidesUrl}
                      </label>
                      <input
                        type="text"
                        id="google_slides_url"
                        value={driveForm.google_slides_url}
                        onChange={(e) => setDriveForm(prev => ({ ...prev, google_slides_url: e.target.value }))}
                        className="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
                      />
                    </div>
                    
                    <div>
                      <label htmlFor="notes" className="block text-sm font-medium text-gray-700">
                        {t.notes}
                      </label>
                      <textarea
                        id="notes"
                        value={driveForm.notes}
                        onChange={(e) => setDriveForm(prev => ({ ...prev, notes: e.target.value }))}
                        placeholder="추가 안내사항이나 메모를 입력하세요..."
                        rows={3}
                        className="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
                      />
                    </div>
                  </div>

                  <div className="mt-6 flex justify-end space-x-3">
                    <button
                      onClick={() => setDriveModal(false)}
                      disabled={processing}
                      className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    >
                      {t.cancel}
                    </button>
                    <button
                      onClick={handleSaveDriveAccess}
                      disabled={processing}
                      className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    >
                      {processing ? (
                        <Loader2 className="h-4 w-4 animate-spin mr-2" />
                      ) : (
                        <Save className="h-4 w-4 mr-2" />
                      )}
                      {t.save}
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default ApplicationsReportSimple
